#pragma kernel Density
#include "/Includes/Density.compute"
//#include "/Includes/Noise.compute"
//#include "/Includes/Noise2D.compute"
#include "/Includes/SimplexNoise.compute"

// Noise settings
StructuredBuffer<float3> offsets;
int octaves;
float lacunarity;
float persistence;
float noiseScale;
float noiseWeight;
float floorOffset;
float weightMultiplier;
bool closeEdges;
float hardFloor;
float hardFloorWeight;

float4 params;

[numthreads(numThreads,numThreads,numThreads)]
void Density (int3 id : SV_DispatchThreadID)
{
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis) {
        return;
    }
	
	float3 pos = centre + id * spacing - boundsSize / 2;
	float2 pos2D = float2(pos.x, pos.z);
    float offsetNoise = 0;

	//Scaling up the terrain
	float3 sample_pos = float3(pos.x * 0.5f, pos.y * 0.25f, pos.z * 0.5f);
	//pos2D = pos2D * 0.5;

    float noise = 0;
	//Higher frequency = more spread out; Lower frequency = cooler features
	float frequency = .0035;
	float frequencyofAmplitude = .001;
	float amplitude = abs(snoise(sample_pos * frequencyofAmplitude)) * 55.0f;
	//float amplitude = 15;
    //float weight = 1;
    for (int j =0; j < octaves; j ++) {
        //float n = snoise((pos+offsetNoise) * frequency + offsets[j] + offset);
		float n = snoise(sample_pos * frequency);
        float v = 1-abs(n);
        //v = v*v;
        //v *= weight;
        //weight = max(min(v*weightMultiplier,1),0);
        noise += n * amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
    }
    
    float finalVal = -(pos.y + floorOffset) + noise * noiseWeight;
	if (finalVal > 0) {
		finalVal = pow(abs(finalVal), 0.7f);
	}
    //this makes the shit more chunky
	//finalVal = noise * noiseWeight - pos.y;

    if (pos.y < hardFloor) {
        finalVal += hardFloorWeight;
    }

    if (closeEdges) {
        float3 edgeOffset = abs(pos*2)-worldSize + spacing/2;
        float edgeWeight = saturate(sign(max(max(edgeOffset.x,edgeOffset.y),edgeOffset.z)));
        finalVal = finalVal * (1-edgeWeight) - 100 * edgeWeight;
        
    }

    int index = indexFromCoord(id.x,id.y,id.z);
    points[index] = float4(pos, finalVal);
    
}
